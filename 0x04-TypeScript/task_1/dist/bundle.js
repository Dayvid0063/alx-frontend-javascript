!function(e){var o={};function n(t){if(o[t])return o[t].exports;var r=o[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=o,n.d=function(e,o,t){n.o(e,o)||Object.defineProperty(e,o,{enumerable:!0,get:t})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,o){if(1&o&&(e=n(e)),8&o)return e;if(4&o&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(n.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&o&&"string"!=typeof e)for(var r in e)n.d(t,r,function(o){return e[o]}.bind(null,r));return t},n.n=function(e){var o=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(o,"a",o),o},n.o=function(e,o){return Object.prototype.hasOwnProperty.call(e,o)},n.p="",n(n.s=0)}([function(e,o){var n=function(){function e(e,o){this.firstName=e,this.lastName=o}return e.prototype.workOnHomework=function(){return"Currently working"},e.prototype.displayName=function(){return this.firstName},e}();console.log({firstName:"John",fullTimeEmployee:!1,lastName:"Doe",location:"London",contract:!1});var t;console.log({firstName:"John",lastName:"Doe",location:"London",fullTimeEmployee:!0,numberOfReports:17}),console.log((t="Doe","John".charAt(0)+". "+t));var r=new n("David","Orji");console.log(r.displayName()),console.log(r.workOnHomework())}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,